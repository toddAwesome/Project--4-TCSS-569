%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!181963792 &2655988077585873504
Preset:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_Name: MonoScript
  m_TargetType:
    m_NativeTypeID: 115
    m_ManagedTypePPtr: {fileID: 0}
    m_ManagedTypeFallback: 
  m_Properties:
  - target: {fileID: 0}
    propertyPath: m_Name
    value: ArduinoPlane
    objectReference: {fileID: 0}
  - target: {fileID: 0}
    propertyPath: m_Script
    value: "using System.Collections;\r\nusing System.Collections.Generic;\r\nusing
      System.IO.Ports;\r\nusing UnityEngine;\r\n\r\npublic class ArduinoPlane : MonoBehaviour\r\n{\r\n
      \   SerialPort serial = new SerialPort(\"COM4\", 115200);\r\n\r\n    // Use
      this for initialization\r\n    void Start()\r\n    {\r\n        serial.Open();\r\n
      \   }\r\n\r\n    // Update is called once per frame\r\n    void Update()\r\n
      \   {\r\n        if (!serial.IsOpen)\r\n        {\r\n            serial.Open();\r\n
      \       }\r\n        string[] accelerometer = serial.ReadLine().Split(',');\r\n
      \       string[] gyroscope = serial.ReadLine().Split(',');\r\n        string[]
      mag = serial.ReadLine().Split(',');\r\n\r\n        transform.Translate(float.Parse(accelerometer[0]),
      //x\r\n                            float.Parse(accelerometer[1]), //y\r\n                            float.Parse(accelerometer[2]));
      //z\r\n\r\n        Quaternion rot = Quaternion.Euler(new Vector3(float.Parse(gyroscope[0]),\r\n
      \                                                     float.Parse(gyroscope[1]),\r\n
      \                                                     float.Parse(gyroscope[2])));\r\n\r\n
      \       transform.rotation = Quaternion.Slerp(transform.rotation, rot, Time.deltaTime
      * 2.0f);\r\n    }\r\n}\r\n"
    objectReference: {fileID: 0}
  - target: {fileID: 0}
    propertyPath: m_DefaultReferences.Array.size
    value: 0
    objectReference: {fileID: 0}
  - target: {fileID: 0}
    propertyPath: m_Icon
    value: 
    objectReference: {fileID: 0}
  - target: {fileID: 0}
    propertyPath: m_ExecutionOrder
    value: 0
    objectReference: {fileID: 0}
  - target: {fileID: 0}
    propertyPath: m_ClassName
    value: ArduinoPlane
    objectReference: {fileID: 0}
  - target: {fileID: 0}
    propertyPath: m_Namespace
    value: 
    objectReference: {fileID: 0}
